@page "/Articles/Edit/{id:int}"
@model Mo.PersonalWebsite.Pages.Articles.EditModel
@{
    ViewData["Title"] = "Edit Article";
}

<!-- Include Quill.js CSS -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">

<section class="py-5 bg-light">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h3 mb-1">Edit Article</h1>
                <p class="text-secondary mb-0">Update your blog article</p>
            </div>
            <div class="d-flex gap-2">
                @if (Model.Article != null)
                {
                    <a href="/Articles/@Model.Article.Slug" target="_blank" class="btn btn-outline-info">
                        <i class="bi bi-eye me-1"></i>Preview
                    </a>
                }
                <a href="/Articles/Manage" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left me-1"></i>Back to Articles
                </a>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-8">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <form method="post">
                            <input asp-for="Input.Id" type="hidden" />
                            <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>
                            
                            <!-- Title -->
                            <div class="mb-3">
                                <label asp-for="Input.Title" class="form-label fw-semibold">Title</label>
                                <input asp-for="Input.Title" class="form-control" placeholder="Enter article title..." />
                                <span asp-validation-for="Input.Title" class="text-danger"></span>
                            </div>

                            <!-- Slug -->
                            <div class="mb-3">
                                <label asp-for="Input.Slug" class="form-label fw-semibold">URL Slug</label>
                                <input asp-for="Input.Slug" class="form-control" placeholder="article-url-slug" />
                                <div class="form-text">Used in the article URL.</div>
                                <span asp-validation-for="Input.Slug" class="text-danger"></span>
                            </div>

                            <!-- Content -->
                            <div class="mb-3">
                                <label class="form-label fw-semibold">Content</label>
                                <div id="editor" style="height: 400px;"></div>
                                <input asp-for="Input.Content" type="hidden" id="contentInput" />
                                <span asp-validation-for="Input.Content" class="text-danger"></span>
                            </div>

                            <!-- Actions -->
                            <div class="d-flex gap-2">
                                @if (Model.Input.IsPublished)
                                {
                                    <button type="submit" name="Input.IsPublished" value="true" class="btn btn-success">
                                        <i class="bi bi-check-circle me-1"></i>Update & Keep Published
                                    </button>
                                    <button type="submit" name="Input.IsPublished" value="false" class="btn btn-outline-warning">
                                        <i class="bi bi-eye-slash me-1"></i>Unpublish
                                    </button>
                                }
                                else
                                {
                                    <button type="submit" name="Input.IsPublished" value="true" class="btn btn-success">
                                        <i class="bi bi-check-circle me-1"></i>Publish Article
                                    </button>
                                    <button type="submit" name="Input.IsPublished" value="false" class="btn btn-outline-primary">
                                        <i class="bi bi-file-earmark me-1"></i>Save as Draft
                                    </button>
                                }
                                <a href="/Articles/Manage" class="btn btn-outline-secondary ms-auto">
                                    Cancel
                                </a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <!-- Article Info -->
                @if (Model.Article != null)
                {
                    <div class="card shadow-sm mb-4">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="bi bi-info-circle me-1"></i>Article Info</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-2">
                                <strong>Status:</strong>
                                @if (Model.Article.IsPublished)
                                {
                                    <span class="badge text-bg-success ms-1">Published</span>
                                }
                                else
                                {
                                    <span class="badge text-bg-secondary ms-1">Draft</span>
                                }
                            </div>
                            <div class="mb-2">
                                <strong>Created:</strong> @Model.Article.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")
                            </div>
                            <div class="mb-2">
                                <strong>Last Updated:</strong> @Model.Article.UpdatedAt.ToString("MMM dd, yyyy 'at' HH:mm")
                            </div>
                            @if (Model.Article.PublishedAt.HasValue)
                            {
                                <div class="mb-2">
                                    <strong>Published:</strong> @Model.Article.PublishedAt.Value.ToString("MMM dd, yyyy 'at' HH:mm")
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- SEO Settings -->
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="bi bi-search me-1"></i>SEO Settings</h6>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label asp-for="Input.MetaDescription" class="form-label">Meta Description</label>
                            <textarea asp-for="Input.MetaDescription" class="form-control" rows="3" placeholder="Brief description for search engines..."></textarea>
                            <div class="form-text">Recommended: 150-160 characters</div>
                            <span asp-validation-for="Input.MetaDescription" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Input.MetaKeywords" class="form-label">Meta Keywords</label>
                            <input asp-for="Input.MetaKeywords" class="form-control" placeholder="keyword1, keyword2, keyword3" />
                            <div class="form-text">Comma-separated keywords</div>
                            <span asp-validation-for="Input.MetaKeywords" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <!-- Publishing -->
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h6 class="mb-0"><i class="bi bi-gear me-1"></i>Publishing</h6>
                    </div>
                    <div class="card-body">
                        <div class="form-check">
                            <input asp-for="Input.IsPublished" class="form-check-input" type="checkbox" />
                            <label asp-for="Input.IsPublished" class="form-check-label">
                                Published
                            </label>
                        </div>
                        <div class="form-text">Toggle to publish or unpublish</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Include Quill.js -->
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>

<script>
    // Initialize Quill editor
    var quill = new Quill('#editor', {
        theme: 'snow',
        modules: {
            toolbar: [
                [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                ['bold', 'italic', 'underline', 'strike'],
                [{ 'color': [] }, { 'background': [] }],
                [{ 'script': 'sub'}, { 'script': 'super' }],
                ['blockquote', 'code-block'],
                [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                [{ 'indent': '-1'}, { 'indent': '+1' }],
                [{ 'align': [] }],
                ['link', 'image', 'video'],
                ['clean']
            ]
        }
    });

    // Load existing content
    const existingContent = document.getElementById('contentInput').value;
    if (existingContent) {
        quill.root.innerHTML = existingContent;
    }

    // Auto-generate slug from title (only if slug is empty or matches current title)
    const titleInput = document.querySelector('input[name="Input.Title"]');
    const slugInput = document.querySelector('input[name="Input.Slug"]');
    const originalSlug = slugInput.value;

    titleInput.addEventListener('input', function(e) {
        const title = e.target.value;
        
        // Only auto-update if slug is empty or hasn't been manually changed
        if (!slugInput.value || slugInput.value === generateSlug(titleInput.dataset.originalTitle || '')) {
            const slug = generateSlug(title);
            slugInput.value = slug;
        }
    });

    // Store original title for comparison
    titleInput.dataset.originalTitle = titleInput.value;

    function generateSlug(text) {
        return text
            .toLowerCase()
            .replace(/[^a-z0-9\s-]/g, '')
            .replace(/\s+/g, '-')
            .replace(/-+/g, '-')
            .replace(/^-|-$/g, '');
    }

    // Update hidden input with Quill content before form submission
    document.querySelector('form').addEventListener('submit', function() {
        document.getElementById('contentInput').value = quill.root.innerHTML;
    });
</script>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
